//
// File generated by rootcint at Fri May 23 10:35:10 2008

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "sp_Dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SpicePlot_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_SpicePlot(void *p);
   static void deleteArray_SpicePlot(void *p);
   static void destruct_SpicePlot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SpicePlot*)
   {
      ::SpicePlot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SpicePlot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SpicePlot", ::SpicePlot::Class_Version(), "spiceplot.hh", 64,
                  typeid(::SpicePlot), DefineBehavior(ptr, ptr),
                  &::SpicePlot::Dictionary, isa_proxy, 0,
                  sizeof(::SpicePlot) );
      instance.SetDelete(&delete_SpicePlot);
      instance.SetDeleteArray(&deleteArray_SpicePlot);
      instance.SetDestructor(&destruct_SpicePlot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SpicePlot*)
   {
      return GenerateInitInstanceLocal((::SpicePlot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SpicePlot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *SpicePlot::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SpicePlot::Class_Name()
{
   return "SpicePlot";
}

//______________________________________________________________________________
const char *SpicePlot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SpicePlot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SpicePlot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SpicePlot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SpicePlot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SpicePlot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SpicePlot::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SpicePlot*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void SpicePlot::Streamer(TBuffer &R__b)
{
   // Stream an object of class SpicePlot.

   TGMainFrame::Streamer(R__b);
}

//______________________________________________________________________________
void SpicePlot::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class SpicePlot.
      TClass *R__cl = ::SpicePlot::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fCleanup", &fCleanup);
      R__insp.Inspect(R__cl, R__parent, "*fEmbeddedCanvas", &fEmbeddedCanvas);
      R__insp.Inspect(R__cl, R__parent, "*fStatusBar", &fStatusBar);
      R__insp.Inspect(R__cl, R__parent, "down_x", &down_x);
      R__insp.Inspect(R__cl, R__parent, "down_y", &down_y);
      R__insp.Inspect(R__cl, R__parent, "*fLastDir", &fLastDir);
      R__insp.Inspect(R__cl, R__parent, "*fCurrentFile", &fCurrentFile);
      R__insp.Inspect(R__cl, R__parent, "*fToolBar", &fToolBar);
      R__insp.Inspect(R__cl, R__parent, "PlotState", &PlotState);
      R__insp.Inspect(R__cl, R__parent, "screen", (void*)&screen);
      ::ROOT::GenericShowMembers("TPoint", (void*)&screen, R__insp, strcat(R__parent,"screen."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "X", &X);
      R__insp.Inspect(R__cl, R__parent, "Y", &Y);
      R__insp.Inspect(R__cl, R__parent, "*ftmg", &ftmg);
      R__insp.Inspect(R__cl, R__parent, "*fLegend", &fLegend);
      R__insp.Inspect(R__cl, R__parent, "SelectOrZoom", &SelectOrZoom);
      R__insp.Inspect(R__cl, R__parent, "t1", &t1);
      R__insp.Inspect(R__cl, R__parent, "y1", &y1);
      R__insp.Inspect(R__cl, R__parent, "t2", &t2);
      R__insp.Inspect(R__cl, R__parent, "y2", &y2);
      R__insp.Inspect(R__cl, R__parent, "*tm1", &tm1);
      R__insp.Inspect(R__cl, R__parent, "*tm2", &tm2);
      R__insp.Inspect(R__cl, R__parent, "fZoomLevel", &fZoomLevel);
      R__insp.Inspect(R__cl, R__parent, "verbose", &verbose);
      TGMainFrame::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SpicePlot(void *p) {
      delete ((::SpicePlot*)p);
   }
   static void deleteArray_SpicePlot(void *p) {
      delete [] ((::SpicePlot*)p);
   }
   static void destruct_SpicePlot(void *p) {
      typedef ::SpicePlot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SpicePlot

/********************************************************
* sp_Dict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtablesp_Dict();

extern "C" void G__set_cpp_environmentsp_Dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("spiceplot.hh");
  G__cpp_reset_tagtablesp_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevsp_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SpicePlot */
static int G__sp_Dict_354_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SpicePlot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SpicePlot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SpicePlot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SpicePlot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpicePlot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SpicePlot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SpicePlot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SpicePlot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SpicePlot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpicePlot* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new SpicePlot(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SpicePlot(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new SpicePlot(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SpicePlot(
(const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new SpicePlot((const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SpicePlot((const TGWindow*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new SpicePlot((const TGWindow*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SpicePlot((const TGWindow*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__sp_DictLN_SpicePlot);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpicePlot*) G__getstructoffset())->ProcessedEvent((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (TObject*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpicePlot*) G__getstructoffset())->HandleMenu((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpicePlot*) G__getstructoffset())->HandleToolBar((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpicePlot*) G__getstructoffset())->SetVerbose((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__sp_Dict_354_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SpicePlot*) G__getstructoffset())->OpenAndParseFile((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SpicePlot G__TSpicePlot;
static int G__sp_Dict_354_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (SpicePlot*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SpicePlot*) (soff+(sizeof(SpicePlot)*i)))->~G__TSpicePlot();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (SpicePlot*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((SpicePlot*) (soff))->~G__TSpicePlot();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SpicePlot */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncsp_Dict {
 public:
  G__Sizep2memfuncsp_Dict(): p(&G__Sizep2memfuncsp_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncsp_Dict::*p)();
};

size_t G__get_sizep2memfuncsp_Dict()
{
  G__Sizep2memfuncsp_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancesp_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot))) {
     SpicePlot *G__Lderived;
     G__Lderived=(SpicePlot*)0x1000;
     {
       TGMainFrame *G__Lpbase=(TGMainFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TGMainFrame),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGCompositeFrame *G__Lpbase=(TGCompositeFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TGCompositeFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGFrame *G__Lpbase=(TGFrame*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TGFrame),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGWindow *G__Lpbase=(TGWindow*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TGWindow),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGObject *G__Lpbase=(TGObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TGObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),G__get_linked_tagnum(&G__sp_DictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablesp_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__sp_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__sp_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SpicePlot */
static void G__setup_memvarSpicePlot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot));
   { SpicePlot *p; p=(SpicePlot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TList),-1,-1,4,"fCleanup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TRootEmbeddedCanvas),-1,-1,4,"fEmbeddedCanvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TGStatusBar),-1,-1,4,"fStatusBar=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"down_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"down_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TString),-1,-1,4,"fLastDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TString),-1,-1,4,"fCurrentFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TGToolBar),-1,-1,4,"fToolBar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"PlotState=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__sp_DictLN_TPoint),-1,-1,4,"screen=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"X=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TMultiGraph),-1,-1,4,"ftmg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TLegend),-1,-1,4,"fLegend=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"SelectOrZoom=",0,"True if in Zoom mode.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"t1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"t2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TMarker),-1,-1,4,"tm1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__sp_DictLN_TMarker),-1,-1,4,"tm2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZoomLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"verbose=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarsp_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSpicePlot(void) {
   /* SpicePlot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot));
   G__memfunc_setup("Class",502,G__sp_Dict_354_0_1, 85, G__get_linked_tagnum(&G__sp_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&SpicePlot::Class), 0);
   G__memfunc_setup("Class_Name",982,G__sp_Dict_354_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&SpicePlot::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__sp_Dict_354_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&SpicePlot::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__sp_Dict_354_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&SpicePlot::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__sp_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__sp_Dict_354_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__sp_Dict_354_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&SpicePlot::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__sp_Dict_354_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&SpicePlot::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__sp_Dict_354_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&SpicePlot::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__sp_Dict_354_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&SpicePlot::DeclFileLine), 0);
   G__memfunc_setup("SpicePlot",915,G__sp_Dict_354_0_13, 105, G__get_linked_tagnum(&G__sp_DictLN_SpicePlot), -1, 0, 4, 1, 1, 0, 
"U 'TGWindow' - 10 - p h - 'UInt_t' 0 '1200' w "
"h - 'UInt_t' 0 '400' h i - 'Int_t' 0 '0' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseWindow",1134,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessedEvent",1450,G__sp_Dict_354_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y U 'TObject' - 0 - selected", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleMenu",993,G__sp_Dict_354_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleToolBar",1279,G__sp_Dict_354_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerbose",1026,G__sp_Dict_354_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenAndParseFile",1568,G__sp_Dict_354_0_19, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEmbeddedCanvas",1647,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 0 - w h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateStatusBar",1517,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateMenuBar",1278,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateToolBar",1287,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoLoad",563,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotMe",593,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnZoom",616,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zoom",421,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZoomAxis",826,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TAxis' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGraphObjects",1808,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanGraphObjects",1695,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentFileName",1808,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - File", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SpicePlot", 1041, G__sp_Dict_354_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncsp_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalsp_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcsp_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__sp_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGObject = { "TGObject" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGWindow = { "TGWindow" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TPoint = { "TPoint" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGFrame = { "TGFrame" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGCompositeFrame = { "TGCompositeFrame" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TMultiGraph = { "TMultiGraph" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TLegend = { "TLegend" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TRootEmbeddedCanvas = { "TRootEmbeddedCanvas" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGStatusBar = { "TGStatusBar" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TGToolBar = { "TGToolBar" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_TMarker = { "TMarker" , 99 , -1 };
G__linked_taginfo G__sp_DictLN_SpicePlot = { "SpicePlot" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablesp_Dict() {
  G__sp_DictLN_TClass.tagnum = -1 ;
  G__sp_DictLN_TBuffer.tagnum = -1 ;
  G__sp_DictLN_TMemberInspector.tagnum = -1 ;
  G__sp_DictLN_TObject.tagnum = -1 ;
  G__sp_DictLN_TList.tagnum = -1 ;
  G__sp_DictLN_TString.tagnum = -1 ;
  G__sp_DictLN_TGObject.tagnum = -1 ;
  G__sp_DictLN_TGWindow.tagnum = -1 ;
  G__sp_DictLN_TPoint.tagnum = -1 ;
  G__sp_DictLN_TQObject.tagnum = -1 ;
  G__sp_DictLN_TGFrame.tagnum = -1 ;
  G__sp_DictLN_TGCompositeFrame.tagnum = -1 ;
  G__sp_DictLN_TGMainFrame.tagnum = -1 ;
  G__sp_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__sp_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__sp_DictLN_TAxis.tagnum = -1 ;
  G__sp_DictLN_TMultiGraph.tagnum = -1 ;
  G__sp_DictLN_TLegend.tagnum = -1 ;
  G__sp_DictLN_TRootEmbeddedCanvas.tagnum = -1 ;
  G__sp_DictLN_TGStatusBar.tagnum = -1 ;
  G__sp_DictLN_TGToolBar.tagnum = -1 ;
  G__sp_DictLN_TMarker.tagnum = -1 ;
  G__sp_DictLN_SpicePlot.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablesp_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TList);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TString);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGObject);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGWindow);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TPoint);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TQObject);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGFrame);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGCompositeFrame);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGMainFrame);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TAxis);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TMultiGraph);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TLegend);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TRootEmbeddedCanvas);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGStatusBar);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TGToolBar);
   G__get_linked_tagnum_fwd(&G__sp_DictLN_TMarker);
   G__tagtable_setup(G__get_linked_tagnum(&G__sp_DictLN_SpicePlot),sizeof(SpicePlot),-1,62464,(char*)NULL,G__setup_memvarSpicePlot,G__setup_memfuncSpicePlot);
}
extern "C" void G__cpp_setupsp_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupsp_Dict()");
  G__set_cpp_environmentsp_Dict();
  G__cpp_setup_tagtablesp_Dict();

  G__cpp_setup_inheritancesp_Dict();

  G__cpp_setup_typetablesp_Dict();

  G__cpp_setup_memvarsp_Dict();

  G__cpp_setup_memfuncsp_Dict();
  G__cpp_setup_globalsp_Dict();
  G__cpp_setup_funcsp_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncsp_Dict();
  return;
}
class G__cpp_setup_initsp_Dict {
  public:
    G__cpp_setup_initsp_Dict() { G__add_setup_func("sp_Dict",(G__incsetup)(&G__cpp_setupsp_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initsp_Dict() { G__remove_setup_func("sp_Dict"); }
};
G__cpp_setup_initsp_Dict G__cpp_setup_initializersp_Dict;

