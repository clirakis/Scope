//
// File generated by rootcint at Fri Mar 18 09:41:38 2005.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "My_Dict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void Geo1_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *Geo1_IsA(const void*);
   static void delete_Geo1(void *p);
   static void deleteArray_Geo1(void *p);
   static void destruct_Geo1(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::Geo1*)
   {
      ::Geo1 *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("Geo1", ::Geo1::Class_Version(), "geo1.hh", 11,
                  typeid(::Geo1), DefineBehavior(ptr, ptr),
                  &::Geo1::Dictionary, &Geo1_IsA, 0,
                  sizeof(::Geo1) );
      instance.SetDelete(&delete_Geo1);
      instance.SetDeleteArray(&deleteArray_Geo1);
      instance.SetDestructor(&destruct_Geo1);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::Geo1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *Geo1::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Geo1::Class_Name()
{
   return "Geo1";
}

//______________________________________________________________________________
const char *Geo1::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::Geo1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Geo1::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::Geo1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Geo1::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::Geo1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Geo1::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::Geo1*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Geo1::Streamer(TBuffer &R__b)
{
   // Stream an object of class Geo1.

   TTimer::Streamer(R__b);
}

//______________________________________________________________________________
void Geo1::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Geo1.

      TClass *R__cl = ::Geo1::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*mat", &mat);
      R__insp.Inspect(R__cl, R__parent, "*med", &med);
      R__insp.Inspect(R__cl, R__parent, "*vol", &vol);
      R__insp.Inspect(R__cl, R__parent, "*top", &top);
      R__insp.Inspect(R__cl, R__parent, "r1", &r1);
      r1.ShowMembers(R__insp, strcat(R__parent,"r1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "t1", &t1);
      t1.ShowMembers(R__insp, strcat(R__parent,"t1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*c", &c);
      R__insp.Inspect(R__cl, R__parent, "theta", &theta);
      TTimer::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *Geo1_IsA(const void *obj) {
      return ((::Geo1*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_Geo1(void *p) {
      delete ((::Geo1*)p);
   }
   static void deleteArray_Geo1(void *p) {
      delete [] ((::Geo1*)p);
   }
   static void destruct_Geo1(void *p) {
      typedef ::Geo1 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Geo1

/********************************************************
* My_Dict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableMy_Dict();

extern "C" void G__set_cpp_environmentMy_Dict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("geo1.hh");
  G__cpp_reset_tagtableMy_Dict();
}
class G__My_DictdOcpp_tag {};

void* operator new(size_t size,G__My_DictdOcpp_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__My_DictdOcpp_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_My_DictdOcpp() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevMy_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Geo1 */
static int G__My_Dict_296_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Geo1 *p=NULL;
      p = new Geo1((int)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__My_DictLN_Geo1);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((Geo1*)(G__getstructoffset()))->Notify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Geo1*)(G__getstructoffset()))->Paint((Option_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Geo1*)(G__getstructoffset()))->Animate();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)Geo1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)Geo1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)Geo1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      Geo1::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const Geo1*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Geo1*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Geo1*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Geo1*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)Geo1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)Geo1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)Geo1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__My_Dict_296_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)Geo1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__My_Dict_296_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Geo1 *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new Geo1(*(Geo1*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__My_DictLN_Geo1);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Geo1 G__TGeo1;
static int G__My_Dict_296_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Geo1 *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (Geo1 *)((G__getstructoffset())+sizeof(Geo1)*i);
   else  delete (Geo1 *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__My_Dict_296_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Geo1 *dest = (Geo1*)(G__getstructoffset());
   *dest = (*(Geo1*)libp->para[0].ref);
   const Geo1& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Geo1 */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMy_Dict {
 public:
  G__Sizep2memfuncMy_Dict() {p=&G__Sizep2memfuncMy_Dict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMy_Dict::*p)();
};

size_t G__get_sizep2memfuncMy_Dict()
{
  G__Sizep2memfuncMy_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMy_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__My_DictLN_Geo1))) {
     Geo1 *G__Lderived;
     G__Lderived=(Geo1*)0x1000;
     {
       TTimer *G__Lpbase=(TTimer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1),G__get_linked_tagnum(&G__My_DictLN_TTimer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSysEvtHandler *G__Lpbase=(TSysEvtHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1),G__get_linked_tagnum(&G__My_DictLN_TSysEvtHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1),G__get_linked_tagnum(&G__My_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1),G__get_linked_tagnum(&G__My_DictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMy_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.41 2004/11/19 07:25:43 brun Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__My_DictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.41 2004/11/19 07:25:43 brun Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__My_DictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.41 2004/11/19 07:25:43 brun Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Geo1 */
static void G__setup_memvarGeo1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1));
   { Geo1 *p; p=(Geo1*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoMaterial),-1,-1,4,"mat=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoMedium),-1,-1,4,"med=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoVolume),-1,-1,4,"vol=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoVolume),-1,-1,4,"top=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoRotation),-1,-1,4,"r1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__My_DictLN_TGeoTranslation),-1,-1,4,"t1=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TCanvas),-1,-1,4,"c=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__My_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMy_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGeo1(void) {
   /* Geo1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1));
   G__memfunc_setup("Geo1",332,G__My_Dict_296_1_0,105,G__get_linked_tagnum(&G__My_DictLN_Geo1),-1,0,1,1,1,0,"i - - 0 - stuff",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Notify",633,G__My_Dict_296_2_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Paint",508,G__My_Dict_296_3_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 - option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Animate",703,G__My_Dict_296_4_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__My_Dict_296_5_0,85,G__get_linked_tagnum(&G__My_DictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&Geo1::Class),0);
   G__memfunc_setup("Class_Name",982,G__My_Dict_296_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&Geo1::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__My_Dict_296_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&Geo1::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__My_Dict_296_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&Geo1::Dictionary),0);
   G__memfunc_setup("IsA",253,G__My_Dict_296_9_0,85,G__get_linked_tagnum(&G__My_DictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__My_Dict_296_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__My_Dict_296_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__My_Dict_296_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__My_Dict_296_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&Geo1::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__My_Dict_296_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&Geo1::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__My_Dict_296_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&Geo1::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__My_Dict_296_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&Geo1::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("Geo1",332,G__My_Dict_296_7_1,(int)('i'),G__get_linked_tagnum(&G__My_DictLN_Geo1),-1,0,1,1,1,0,"u 'Geo1' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Geo1",458,G__My_Dict_296_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__My_Dict_296_9_1,(int)('u'),G__get_linked_tagnum(&G__My_DictLN_Geo1),-1,1,1,1,1,0,"u 'Geo1' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMy_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMy_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMy_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__My_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__My_DictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TSysEvtHandler = { "TSysEvtHandler" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TGeoMaterial = { "TGeoMaterial" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TGeoMedium = { "TGeoMedium" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TGeoTranslation = { "TGeoTranslation" , 99 , -1 };
G__linked_taginfo G__My_DictLN_TGeoRotation = { "TGeoRotation" , 99 , -1 };
G__linked_taginfo G__My_DictLN_Geo1 = { "Geo1" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMy_Dict() {
  G__My_DictLN_TClass.tagnum = -1 ;
  G__My_DictLN_TBuffer.tagnum = -1 ;
  G__My_DictLN_TMemberInspector.tagnum = -1 ;
  G__My_DictLN_TObject.tagnum = -1 ;
  G__My_DictLN_TTimer.tagnum = -1 ;
  G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__My_DictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__My_DictLN_TQObject.tagnum = -1 ;
  G__My_DictLN_TSysEvtHandler.tagnum = -1 ;
  G__My_DictLN_TCanvas.tagnum = -1 ;
  G__My_DictLN_TGeoMaterial.tagnum = -1 ;
  G__My_DictLN_TGeoMedium.tagnum = -1 ;
  G__My_DictLN_TGeoVolume.tagnum = -1 ;
  G__My_DictLN_TGeoTranslation.tagnum = -1 ;
  G__My_DictLN_TGeoRotation.tagnum = -1 ;
  G__My_DictLN_Geo1.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMy_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__My_DictLN_TClass);
   G__get_linked_tagnum(&G__My_DictLN_TBuffer);
   G__get_linked_tagnum(&G__My_DictLN_TMemberInspector);
   G__get_linked_tagnum(&G__My_DictLN_TObject);
   G__get_linked_tagnum(&G__My_DictLN_TTimer);
   G__get_linked_tagnum(&G__My_DictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__My_DictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__My_DictLN_TQObject);
   G__get_linked_tagnum(&G__My_DictLN_TSysEvtHandler);
   G__get_linked_tagnum(&G__My_DictLN_TCanvas);
   G__get_linked_tagnum(&G__My_DictLN_TGeoMaterial);
   G__get_linked_tagnum(&G__My_DictLN_TGeoMedium);
   G__get_linked_tagnum(&G__My_DictLN_TGeoVolume);
   G__get_linked_tagnum(&G__My_DictLN_TGeoTranslation);
   G__get_linked_tagnum(&G__My_DictLN_TGeoRotation);
   G__tagtable_setup(G__get_linked_tagnum(&G__My_DictLN_Geo1),sizeof(Geo1),-1,62464,(char*)NULL,G__setup_memvarGeo1,G__setup_memfuncGeo1);
}
extern "C" void G__cpp_setupMy_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMy_Dict()");
  G__set_cpp_environmentMy_Dict();
  G__cpp_setup_tagtableMy_Dict();

  G__cpp_setup_inheritanceMy_Dict();

  G__cpp_setup_typetableMy_Dict();

  G__cpp_setup_memvarMy_Dict();

  G__cpp_setup_memfuncMy_Dict();
  G__cpp_setup_globalMy_Dict();
  G__cpp_setup_funcMy_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMy_Dict();
  return;
}
class G__cpp_setup_initMy_Dict {
  public:
    G__cpp_setup_initMy_Dict() { G__add_setup_func("My_Dict",(G__incsetup)(&G__cpp_setupMy_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMy_Dict() { G__remove_setup_func("My_Dict"); }
};
G__cpp_setup_initMy_Dict G__cpp_setup_initializerMy_Dict;

